<div class='row-fluid searchChart' data-chart='{{searchData}}' data-maxScore='{{maxScore}}'>
	<div class='span12' id='searchChart'>
				
	</div>
</div>


{{!
<script type='text/javascript'>
$(function(){
	var oneDay = 1000*60*60*24;
	var chartClass = (function(){
		function chartClass(data, maxScore, container){
			this.scope 		= $(container);
			this.data  		= data;
			this.maxScore 	= parseFloat(maxScore);			
			this.maxRadius  = 50;
			this.init();
		}
		
		chartClass.prototype.x = function(d){
			var d = d._source,
				lastCommit = new Date(d.pushed_at).getTime(),
				currentDate = new Date().getTime();						
			var difference_ms = currentDate - lastCommit;
			/* dates difference*/ 			
			var dD = Math.round(difference_ms/oneDay);   			
			/*	0 - super active - up to 7 days
			 *  1 - up to 30 days
			 *  2 - up to 180 days
			 *  3 - more than 180
			 */			
			function lastCommitBucket(d){
				if ( d > 180 ){
					return 3.5;
				} else if ( d <= 7 ){
					return 0.5;
				} else if ( d <= 30){
					return 1.5;
				} else {
					return 2.5;
				}
			}		
				
			return lastCommitBucket(dD);
		}
		
		chartClass.prototype.y = function(d){
			//max value is 1 === 100%					
			return d._score/this.maxScore;
		}
		
		chartClass.prototype.radius = function(d){
			//watchers gives us the star rating
			var d = d._source,
				watchers = d.watchers;	
			//random for now		
			return 10+watchers*5;
		}
		
		chartClass.prototype.color = function(d){
			return d._source.language;
		}
		
		chartClass.prototype.key = function(d){
			return d._source._id;
		}
		
		chartClass.prototype.init = function(){
			var self = this;
			var margin = {top: 19.5, right: 19.5, bottom: 60, left: 50};		    	
		    var padding = 30;
		    	
		    function xFormatter(d,i){
		    	if ( d === 0.5 ){
		    		return "< 1 week ago";
		    	} else if ( d === 1.5 ){
		    		return "< 1 month ago";
		    	} else if ( d === 2.5 ){
		    		return "< 6 months ago";
		    	} else if ( d === 3.5 ){
		    		return "> 6 months ago";
		    	} else {
		    		return "";
		    	}
		    }
		    	
		    this.width  = this.scope.width() - margin.right - margin.left;
		   	this.height = this.width*9/16;		    
		    this.xScale = d3.scale.linear().domain([0, 4]).range([0, this.width]);
		    this.yScale = d3.scale.linear().domain([0, 1.1]).range([this.height, 0]);
		    		    		    
		    this.radiusScale = d3.scale.sqrt()
		    						.domain([10, d3.max(this.data, function(d){ return self.radius(d); })   ])
		    						.range([5,this.maxRadius]);		    
		    
		    this.colorScale = d3.scale.category20c();
		    
		    this.xAxis = d3.svg.axis()
		    						 .orient("bottom")
		    						 .scale(this.xScale)
		    						 .tickValues([0.5,1.5,2.5,3.5])
		    						 .tickFormat(xFormatter);
    		this.yAxis = d3.svg.axis()
    								 .scale(this.yScale)
    								 .orient("left")
    								 .tickValues([1])
    								 .tickFormat(function(d,i){
    								 	return d === 1 ? "100%" : "";
    								 });
    		
    		this.svg = d3.select(this.scope[0]).append("svg")
		    			.attr("width", this.width + margin.left + margin.right)
						.attr("height", this.height + margin.top + margin.bottom)
						.append("g")
						.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
						
			// Add the x-axis.
			this.svg.append("g")
			    .attr("class", "x axis")
			    .attr("transform", "translate(0," + this.height + ")")
			    .call(this.xAxis);
			
			// Add the y-axis.
			this.svg.append("g")
			    .attr("class", "y axis")
			    .call(this.yAxis);
			
			// Add an x-axis label.
			this.svg.append("text")
			    .attr("class", "x label")
			    .attr("text-anchor", "middle")
			    .attr("x", this.width/2)
			    .attr("y", this.height + margin.bottom - 10)
			    .text("Last commit");
			
			// Add a y-axis label.
			this.svg.append("text")
			    .attr("class", "y label")
			    .attr("text-anchor", "middle")
			    .attr("y", 6)
			    .attr("x", -this.height/2)
			    .attr("dy", "-1em")
			    .attr("transform", "rotate(-90)")
			    .text("Relevance");
			
			// Add the year label; the value is set on transition.						
			var dot = this.svg.append("g")
		      	.attr("class", "dots")
		    	.selectAll(".dot")
		      		.data(this.data)
		    	.enter().append("circle")
		      		.attr("class", "dot")
		      		.style("fill", function(d) { return self.colorScale(self.color(d)); })
		      		.call(position)
		      		.sort(order)
		      		.on("mouseover", this.popup('show', this.scope))
		      		.on("mouseout", this.popup('hide'))
		      		.on("click", this.addToComparison);
			
			dot.append("title")
			      .text(function(d) { return d._source.module_name; });
			      
			
			function position(dot) {
		    	 dot
		    		.attr("cx", function(d) { return self.xScale(self.x(d)); })
		        	.attr("cy", function(d) { return self.yScale(self.y(d)); })
		        	.attr("r", function(d) { return self.radiusScale(self.radius(d)); });
		  	}
		  	
		  	function order(a, b) {
			  return self.radius(b) - self.radius(a);
			}

		}
		
		var popup = $("<div />").addClass("popover").hide().appendTo("#searchChart")
								.append("<h4 class='moduleName' />")
								.append("<h5 class='moduleLanguage' ><span class='color'></span><span class='name'></span></h5>")
								.append("<p class='moduleDescription' />")
								.append("<div class='moduleStars' ></div>");
		
		chartClass.prototype.addToComparison  = function(d,i){
			//TODO: add module comparison
		}
		
		chartClass.prototype.popup = function(action, scope){
			return function(d,i){
				if ( action === 'hide' ){
					popup.hide();
				} else {
					var marginLeft = 50,
						$this = $(this),
						width = height = parseInt($this.attr("r"))*2,
						x = parseInt($this.attr("cx")),
						y = parseInt($this.attr("cy")),
						color = $this.css("fill");
						
					
					var data = d._source,
						stars = data.watchers,						
						lastContribution = humanize.relativeTime(new Date(data.pushed_at).getTime()/1000);
					
					var activity = $("<p class='activity' />").html("<i class='icon-star'></i>Last checking <strong>"+lastContribution+"</strong>"),
						activityStars = $("<p class='stars' />").html("<i class='icon-star'></i><strong>"+stars+" stars</strong> on GitHub");	
											
					$(".moduleName", popup).text(data.module_name);
					$(".moduleLanguage", popup)
						.find(".name").text(data.language).end()
						.find(".color").css({background: color});
					$(".moduleDescription", popup).text(data.description);										
					$(".moduleStars", popup).html("").append(activity, activityStars);
																
					popup.show()
						 .css({
							bottom: (scope.outerHeight()-y-(popup.outerHeight()/2)-15)+'px',
							left: x+marginLeft+(width/2)+15+'px'
						 });
				}
			}
		}

		
		
		return chartClass;
	})();
	
	var data = $("[data-chart]").data("chart"),
		maxScore = $("[data-maxscore]").data("maxscore");
	var chart = new chartClass(data, maxScore, "#searchChart");
	
});
</script>
}}