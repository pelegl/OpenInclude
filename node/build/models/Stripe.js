// Generated by CoffeeScript 1.6.1
/*
  Config
*/

var ObjectId, User, api_key, async, definition, get_models, statics, stripe;

get_models = require('../conf').get_models;

async = require('async');

User = get_models(["User"])[0];

/*
  Stripe
*/


ObjectId = require('mongoose').Schema.Types.ObjectId;

api_key = "sk_test_HkMUKw1bjVE6Sxo218IiMNWP";

stripe = require("stripe")(api_key);

definition = {
  date: Date
};

({
  rate: Number,
  fee: Number,
  hours: Number,
  client: ObjectId,
  receivepayment: Number,
  chargeid: String
});

statics = {
  addCustomer: function(user, desc, cardnum, expmonth, expyear, cvc, fullName, callback) {
    var Tasks,
      _this = this;
    Tasks = {};
    /*
      Create a token
    */

    Tasks.token = function(token) {
      return stripe.token.create({
        card: {
          number: cardnum,
          exp_month: expmonth,
          exp_year: expyear,
          cvc: cvc,
          name: fullName
        }
      }, token);
    };
    /*
      Check if this user is already registered in Stripe
    */

    Tasks.existing_payment_method = function(method) {
      return user.get_payment_method('Stripe', method);
    };
    Tasks.findOrUpdateCustomer = [
      'existing_payment_method', 'token', function(customer_callback, results) {
        var existing_payment_method, token;
        token = results.token, existing_payment_method = results.existing_payment_method;
        if (!existing_payment_method) {
          /*
            Create new customer
          */

          return stripe.customers.create({
            description: desc,
            card: token.id
          }, customer_callback);
        } else {
          /*
            Update existing customer
          */

          return stripe.customers.update(existing_payment_method.id, {
            card: token.id
          }, customer_callback);
        }
      }
    ];
    /*
      Create stripe payment method if needed
    */

    Tasks.payment_method = [
      'findOrUpdateCustomer', function(payment_method_callback, results) {
        var existing_payment_method, findOrUpdateCustomer, paymentMethod;
        findOrUpdateCustomer = results.findOrUpdateCustomer, existing_payment_method = results.existing_payment_method;
        if (!existing_payment_method) {
          paymentMethod = {
            service: "Stripe",
            id: findOrUpdateCustomer.id
          };
          user.payment_methods.push(paymentMethod);
          return user.save(payment_method_callback);
        } else {
          return payment_method_callback(null);
        }
      }
    ];
    /*
      Perform tasks
    */

    return async.auto(Tasks, function(err, results) {
      return callback(err, user);
    });
  }
};

({
  billCustomer: function(user, amount, callback) {
    var _this = this;
    return user.get_payment_method('Stripe', function(err, method) {
      if (method) {
        return stripe.charges.create({
          amount: amount,
          currency: 'usd',
          customer: method.id
        }, callback);
      } else {
        return callback("No payment method set");
      }
    });
  }
});

exports.definition = definition;

exports.statics = statics;
