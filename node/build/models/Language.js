// Generated by CoffeeScript 1.6.1
/*
  Config
*/

var ObjectId, Repositories, async, definition, get_models, statics,
  __slice = [].slice;

ObjectId = require('mongoose').Schema.Types.ObjectId;

async = require('async');

/*
  Models
*/


get_models = require('../conf').get_models;

Repositories = get_models(["Module"])[0];

definition = {
  name: {
    type: String,
    required: true,
    unique: true
  },
  color: String
};

statics = {
  get_page: function() {
    var callback, limit, opts, page_number, _i,
      _this = this;
    opts = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    page_number = parseInt(opts[0]) || 0;
    limit = parseInt(opts[1]) || 30;
    return async.parallel({
      languages: function(async_callback) {
        return _this.find().skip(page_number * limit).limit(limit).sort({
          name: 1
        }).exec(async_callback);
      },
      total_count: function(async_callback) {
        return _this.count(async_callback);
      }
    }, callback);
  },
  get_siblings: function() {
    var callback, language, limit, opts, page_number, sort, _i,
      _this = this;
    language = arguments[0], opts = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    page_number = parseInt(opts[0]) || 0;
    limit = parseInt(opts[1]) || 30;
    switch (opts[3]) {
      case 'name':
        sort = {
          module_name: 1
        };
        break;
      default:
        sort = {
          stars: -1
        };
    }
    return async.parallel({
      modules: function(async_callback) {
        return Repositories.find({
          language: language
        }).limit(limit).skip(page_number * limit).sort(sort).exec(async_callback);
      },
      total_count: function(async_callback) {
        return Repositories.count({
          language: language
        }, async_callback);
      }
    }, callback);
  }
};

exports.modelName = "language_names";

exports.definition = definition;

exports.statics = statics;
