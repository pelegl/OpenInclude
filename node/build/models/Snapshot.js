// Generated by CoffeeScript 1.6.1
/*
  Config
*/

var ObjectId, async, definition, get_models, statics, toObjectId, _;

ObjectId = require('mongoose').Schema.Types.ObjectId;

toObjectId = require('mongoose').mongo.BSONPure.ObjectID.fromString;

get_models = require('../conf').get_models;

async = require('async');

_ = require('underscore');

definition = {
  repositories: [
    {
      _id: ObjectId,
      owner: String,
      module_name: String,
      _processed: {
        type: Boolean,
        "default": false
      }
    }
  ],
  processed: {
    type: Boolean,
    "default": false
  },
  left: Number
};

statics = {
  update_progress: function(snapshot_id, module, callback) {
    var query, update,
      _this = this;
    query = {
      _id: snapshot_id,
      "repositories._id": module._id,
      "repositories._processed": false
    };
    update = {
      "repositories.$._processed": true,
      $inc: {
        left: -1
      }
    };
    return this.findOneAndUpdate(query, update, function(err, snapshot) {
      if (err != null) {
        return callback(err);
      }
      if (snapshot == null) {
        return callback("cant find snapshot");
      }
      if (!(snapshot.left > 0)) {
        snapshot.processed = true;
        return snapshot.save(function(err) {
          if (err != null) {
            return callback(err);
          }
          return callback(null, 0);
        });
      } else {
        return callback(null, snapshot.left);
      }
    });
  },
  snapshot_make: function(modules, callback) {
    var _this = this;
    return this.findOne({
      processed: false
    }, function(err, snapshot) {
      if (err != null) {
        return callback(err);
      }
      if (snapshot != null) {
        return callback("There was an unprocessed snapshot - continue running previous tasks", snapshot);
      }
      return _this.create({
        repositories: modules,
        left: modules.length
      }, callback);
    });
  }
};

exports.statics = statics;

exports.definition = definition;
