// Generated by CoffeeScript 1.6.1
/*
  Config
*/

var ObjectId, PaymentMethod, async, definition, methods, statics, virtuals, _;

ObjectId = require('mongoose').Schema.Types.ObjectId;

async = require('async');

_ = require('underscore');

/*
  Definition
*/


PaymentMethod = {
  service: {
    type: String,
    "enum": ["Stripe", "PayPal"]
  },
  id: {
    type: String
  }
};

definition = {
  github_id: Number,
  github_display_name: String,
  github_username: String,
  github_avatar_url: String,
  github_email: String,
  github_json: {},
  status: {
    type: ObjectId,
    ref: 'Module'
  },
  merchant: {
    type: Boolean,
    "default": false
  },
  employee: {
    type: Boolean,
    "default": false
  },
  group_id: {
    type: String,
    "enum": ["admin", "developer", "project manager", "client"]
  },
  payment_methods: {
    type: [PaymentMethod],
    "default": []
  }
};

methods = {
  public_info: function() {
    return {
      github_id: this.github_id,
      has_stripe: this.has_stripe,
      payment_methods: this.payment_methods,
      merchant: this.merchant,
      employee: this.employee,
      github_display_name: this.github_display_name,
      github_email: this.github_email,
      github_username: this.github_username,
      github_avatar_url: this.github_avatar_url,
      is_authenticated: true
    };
  },
  get_payment_method: function(service, callback) {
    var _this = this;
    return async.detect(this.payment_methods, function(method, async_detect) {
      return async_detect(method.service === service);
    }, function(method) {
      return callback(null, method);
    });
  }
};

statics = {
  get_user: function(userId, callback) {
    return this.findOne({
      github_id: userId
    }, callback);
  }
};

virtuals = {
  get: {
    has_stripe: function() {
      var method,
        _this = this;
      method = _.find(this.payment_methods, function(method) {
        return method.service === 'Stripe';
      });
      if (method != null) {
        return true;
      } else {
        return false;
      }
    }
  },
  set: {}
};

exports.virtuals = virtuals;

exports.definition = definition;

exports.methods = methods;

exports.statics = statics;
