// Generated by CoffeeScript 1.6.1
/*
  Config
*/

var Module, ObjectId, async, definition, get_models, index, statics, _;

ObjectId = require('mongoose').Schema.Types.ObjectId;

get_models = require('../conf').get_models;

async = require('async');

_ = require('underscore');

Module = get_models(["Module"])[0];

/*
  Definition
*/


definition = {
  module_id: {
    type: ObjectId,
    ref: "Module"
  },
  type: String,
  "public": Boolean,
  payload: {},
  repo: {},
  actor: {},
  org: {},
  created_at: Date,
  id: Number
};

statics = {
  /*
    @function
    creates events for the given module
  */

  publish: function(module_id, event_data, callback) {
    var _this = this;
    if (!Array.isArray(event_data)) {
      event_data = [event_data];
    }
    return async.map(event_data, function(event, async_call) {
      var payload;
      payload = event;
      payload.module_id = module_id;
      return async_call(null, payload);
    }, function(err, modules) {
      return _this.create(modules, function(err) {
        return callback(null);
      });
    });
  },
  pull_for_module: function(stopTS, module_id, callback) {
    var date;
    date = new Date(stopTS);
    return this.find({
      module_id: module_id,
      created_at: {
        $gt: date
      }
    }).sort({
      created_at: 1
    }).exec(callback);
  }
};

index = [
  [
    {
      module_id: 1,
      id: 1
    }, {
      unique: true
    }
  ], [
    {
      module_id: 1,
      created_at: 1
    }
  ]
];

exports.index = index;

exports.statics = statics;

exports.definition = definition;
