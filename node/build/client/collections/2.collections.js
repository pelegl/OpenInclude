// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

(function(exports, isServer) {
  var api, requestPager;
  api = "/api/v.1";
  if (isServer) {
    this.Backbone = require('backbone');
  }
  requestPager = (function(_super) {

    __extends(requestPager, _super);

    function requestPager() {
      return requestPager.__super__.constructor.apply(this, arguments);
    }

    requestPager.prototype.toJSON = function(options) {
      return this.cache[this.currentPage] || [];
    };

    requestPager.prototype.goTo = function(page, options) {
      var response;
      if (page !== void 0) {
        this.currentPage = parseInt(page, 10);
        if (this.cache[this.currentPage] != null) {
          this.info();
          this.trigger("sync");
        } else {
          return this.pager(options);
        }
      } else {
        response = new $.Deferred();
        response.reject();
        return response.promise();
      }
    };

    requestPager.prototype.cache = {};

    requestPager.prototype.paginator_core = {
      type: 'GET',
      dataType: 'json',
      url: function() {
        if (typeof this.url !== 'function') {
          return "" + this.url + "?";
        }
        return "" + (this.url()) + "?";
      }
    };

    requestPager.prototype.paginator_ui = {
      firstPage: 0,
      currentPage: 0,
      perPage: 30
    };

    requestPager.prototype.server_api = {
      'page': function() {
        return this.currentPage;
      },
      'limit': function() {
        return this.perPage;
      }
    };

    requestPager.prototype.preload_data = function(page, limit, data, total_count) {
      this.cache[page] = data;
      this.reset(data, {
        silent: true
      });
      return this.bootstrap({
        totalRecords: parseInt(total_count),
        perPage: limit,
        currentPage: page
      });
    };

    return requestPager;

  })(this.Backbone.Paginator.requestPager);
  exports.Language = requestPager.extend({
    comparator: function(language) {
      return language.get("name");
    },
    model: models.Language,
    url: "/modules",
    parse: function(response) {
      var languages;
      this.cache[this.currentPage] = languages = response.languages;
      this.totalRecords = response.total_count;
      return languages;
    }
  });
  exports.Modules = requestPager.extend({
    initialize: function(models, options) {
      return this.language = options.language || "";
    },
    comparator: function(module) {
      return module.get("watchers");
    },
    model: models.Repo,
    url: function() {
      return "/modules/" + this.language;
    },
    parse: function(response) {
      var modules;
      this.cache[this.currentPage] = modules = response.modules;
      this.totalRecords = response.total_count;
      return modules;
    }
  });
  exports.Discovery = this.Backbone.Collection.extend({
    parse: function(r) {
      var _ref;
      return (_ref = r.response) != null ? _ref : [];
    },
    model: models.Discovery,
    url: "/discover/search",
    maxRadius: function() {
      var _this = this;
      return d3.max(this.models, function(data) {
        return data.radius();
      });
    },
    languageList: function() {
      if (this.groupedModules) {
        return _.keys(this.groupedModules);
      } else {
        return [];
      }
    },
    filters: {},
    fetch: function() {
      var collection, opts, query, _ref;
      _ref = Array.prototype.slice.apply(arguments), query = _ref[0], opts = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      query = query != null ? query : "";
      collection = this;
      return $.getJSON("" + collection.url + "?q=" + query, function(r) {
        var _this = this;
        collection.maxScore = r.maxScore;
        collection.groupedModules = _.groupBy(r.searchData, function(module) {
          return module._source.language;
        });
        return collection.reset(r.searchData);
      });
    }
  });
  exports.DiscoveryComparison = this.Backbone.Collection.extend({
    model: models.Discovery,
    sortBy: function(key, direction) {
      var _this = this;
      key = key != null ? key.split(".") : "_id";
      this.models = _.sortBy(this.models, function(module) {
        var value;
        value = $.isArray(key) ? module.get(key[0])[key[1]] : module.get(key);
        if (key[1] === 'pushed_at') {
          return new Date(value);
        } else {
          return value;
        }
      });
      if (direction === "DESC") {
        this.models.reverse();
      }
      return this.trigger("sort");
    }
  });
  return exports.StackOverflowQuestions = this.Backbone.Collection.extend({
    model: models.StackOverflowQuestion,
    chartMap: function(name) {
      return {
        name: name,
        values: this.where({
          key: name
        })
      };
    },
    parse: function(r) {
      var items, maxTS, questions,
        _this = this;
      this.statistics = r.statistics, questions = r.questions;
      if (!(questions.length > 0)) {
        return [];
      }
      /*
        Add normalization
      */

      items = [];
      _.each(this.statistics.keys, function(key) {
        var list;
        list = _.where(questions, {
          key: key
        });
        return items.push(_.last(list));
      });
      maxTS = _.max(items, function(item) {
        return item.timestamp;
      });
      _.each(items, function(item) {
        var i;
        i = _.extend({}, item);
        i.timestamp = maxTS.timestamp;
        i._id += "_copy";
        return questions.push(i);
      });
      return questions;
    },
    keys: function() {
      return this.statistics.keys || [];
    },
    initialize: function(options) {
      if (options == null) {
        options = {};
      }
      _.bindAll(this, "chartMap");
      this.language = options.language, this.owner = options.owner, this.repo = options.repo;
      this.language || (this.language = "");
      this.repo || (this.repo = "");
      return this.owner || (this.owner = "");
    },
    url: function() {
      return "/modules/" + this.language + "/" + this.owner + "|" + this.repo + "/stackoverflow/json";
    }
  });
}).call(this, (typeof exports === "undefined" ? this["collections"] = {} : exports), typeof exports !== "undefined");
