// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(exports) {
  var root, views;
  root = this;
  views = this.hbt = Handlebars.partials;
  exports.DiscoverChartPopup = (function(_super) {

    __extends(DiscoverChartPopup, _super);

    function DiscoverChartPopup() {
      return DiscoverChartPopup.__super__.constructor.apply(this, arguments);
    }

    DiscoverChartPopup.prototype.tagName = "div";

    DiscoverChartPopup.prototype.className = "popover";

    DiscoverChartPopup.prototype.initialize = function() {
      this.moduleName = $("<h4 />").addClass("moduleName");
      this.moduleLanguage = $("<h5 />").addClass("moduleLanguage").append("<span class='color' />").append("<span class='name' />");
      this.moduleDescription = $("<p />").addClass("moduleDescription");
      this.moduleStars = $("<div />").addClass("moduleStars");
      return this.render();
    };

    DiscoverChartPopup.prototype.render = function() {
      this.$el.appendTo(this.options.scope);
      this.$el.hide().append(this.moduleName, this.moduleLanguage, this.moduleDescription, this.moduleStars);
      return this;
    };

    DiscoverChartPopup.prototype.show = function() {
      this.$el.show();
      return this;
    };

    DiscoverChartPopup.prototype.hide = function() {
      this.$el.hide();
      return this;
    };

    DiscoverChartPopup.prototype.setData = function(datum, $this, scope) {
      var activity, activityStars, color, data, height, lastContribution, stars, width, x, y;
      width = height = parseInt($this.attr("r")) * 2;
      x = parseInt($this.attr("cx"));
      y = parseInt($this.attr("cy"));
      color = $this.css("fill");
      data = datum.get("_source");
      stars = data.watchers;
      lastContribution = humanize.relativeTime(new Date(data.pushed_at).getTime() / 1000);
      activity = $("<p class='activity' />").html("<i class='icon-star'></i>Last checking <strong>" + lastContribution + "</strong>");
      activityStars = $("<p class='stars' />").html("<i class='icon-star'></i><strong>" + stars + " stars</strong> on GitHub");
      this.moduleName.text(data.module_name);
      this.moduleLanguage.find(".name").text(data.language).end().find(".color").css({
        background: color
      });
      this.moduleDescription.text(data.description);
      this.moduleStars.html("").append(activity, activityStars);
      this.show();
      return this.$el.css({
        bottom: (this.options.scope.outerHeight() - y - (this.$el.outerHeight() / 2) - 15) + 'px',
        left: x + this.options.margin.left + (width / 2) + 15 + 'px'
      });
    };

    return DiscoverChartPopup;

  })(this.Backbone.View);
  exports.DiscoverFilter = (function(_super) {

    __extends(DiscoverFilter, _super);

    function DiscoverFilter() {
      return DiscoverFilter.__super__.constructor.apply(this, arguments);
    }

    DiscoverFilter.prototype.events = {
      "change input[type=checkbox]": "filterResults",
      "click [data-reset]": "resetFilter"
    };

    DiscoverFilter.prototype.initialize = function() {
      _.bindAll(this, "render");
      this.context = {
        filters: [
          {
            name: "Language",
            key: "languageFilters"
          }
        ]
      };
      this.listenTo(this.collection, "reset", this.render);
      return this.render();
    };

    DiscoverFilter.prototype.resetFilter = function(e) {
      var $this;
      $this = $(e.currentTarget);
      $this.closest(".filterBox").find("input[type=checkbox]").prop("checked", false);
      this.collection.filters = [];
      this.collection.trigger("filter");
      return false;
    };

    DiscoverFilter.prototype.filterResults = function(e) {
      var $this, languageName;
      $this = $(e.currentTarget);
      languageName = $this.val();
      if ($this.is(":checked")) {
        this.collection.filters[languageName] = true;
      } else {
        delete this.collection.filters[languageName];
      }
      return this.collection.trigger("filter");
    };

    DiscoverFilter.prototype.render = function() {
      var html;
      this.context.filters[0].languages = this.collection.languageList();
      html = views['discover/filter'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'discoverFilter');
      return this;
    };

    return DiscoverFilter;

  })(this.Backbone.View);
  exports.DiscoverComparison = (function(_super) {

    __extends(DiscoverComparison, _super);

    function DiscoverComparison() {
      return DiscoverComparison.__super__.constructor.apply(this, arguments);
    }

    DiscoverComparison.prototype.events = {
      "click [data-sort]": "sortComparison"
    };

    DiscoverComparison.prototype.sortComparison = function(e) {
      var $this, direction, index, key,
        _this = this;
      $this = $(e.currentTarget);
      /*
        sort key
      */

      key = $this.data("sort");
      /*
        set active on the element in the context, remove active from the previous element
      */

      index = $this.closest("th").index();
      /*
        get sort direction
      */

      direction = this.context.headers[index].directionBottom === true ? "ASC" : "DESC";
      _.each(this.context.headers, function(v, k) {
        v.active = false;
        return v.directionBottom = true;
      });
      this.context.headers[index].active = true;
      this.context.headers[index].directionBottom = direction === "DESC" ? true : false;
      this.collection.sortBy(key, direction);
      return false;
    };

    DiscoverComparison.prototype.initialize = function() {
      _.bindAll(this, "render");
      this.listenTo(this.collection, "all", this.render);
      this.context = {
        headers: [
          {
            name: "Project Name",
            key: "_source.module_name"
          }, {
            name: "Language",
            key: "_source.language"
          }, {
            name: "Active Contributors"
          }, {
            name: "Last Commit",
            key: "_source.pushed_at"
          }, {
            name: "Stars on GitHub",
            key: "_source.watchers"
          }, {
            name: "Questions on StackOverflow"
          }, {
            name: "Percentage answered"
          }
        ]
      };
      return this.render();
    };

    DiscoverComparison.prototype.render = function() {
      var html;
      this.context.projects = this.collection.toJSON();
      html = views['discover/compare'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'discoverComparison');
      return this;
    };

    return DiscoverComparison;

  })(this.Backbone.View);
  exports.DiscoverChart = (function(_super) {

    __extends(DiscoverChart, _super);

    function DiscoverChart() {
      return DiscoverChart.__super__.constructor.apply(this, arguments);
    }

    DiscoverChart.prototype.initialize = function() {
      this.listenTo(this.collection, "reset", this.renderChart);
      this.listenTo(this.collection, "filter", this.renderChart);
      this.margin = {
        top: 19.5,
        right: 19.5,
        bottom: 60,
        left: 50
      };
      this.padding = 30;
      this.maxRadius = 50;
      this.width = this.$el.width() - this.margin.right - this.margin.left;
      this.height = this.width * 9 / 16;
      this.xScale = d3.scale.linear().domain([0, 4]).range([0, this.width]);
      this.yScale = d3.scale.linear().domain([0, 1.1]).range([this.height, 0]);
      this.colorScale = d3.scale.category20c();
      _.bindAll(this, "renderChart", "position", "order");
      this.popupView = new exports.DiscoverChartPopup({
        margin: this.margin,
        scope: this.$el
      });
      return this.render();
    };

    DiscoverChart.prototype.setRadiusScale = function() {
      return this.radiusScale = d3.scale.sqrt().domain([10, this.collection.maxRadius()]).range([5, this.maxRadius]);
    };

    DiscoverChart.prototype.formatterX = function(d, i) {
      switch (d) {
        case 0.5:
          return "<1 week ago";
        case 1.5:
          return "< 1 month ago";
        case 2.5:
          return "< 6 months ago";
        case 3.5:
          return "> 6 months ago";
      }
    };

    DiscoverChart.prototype.position = function(dot) {
      var _this = this;
      return dot.attr("cx", function(d) {
        return _this.xScale(d.x());
      }).attr("cy", function(d) {
        return _this.yScale(d.y(_this.collection.maxScore));
      }).attr("r", function(d) {
        return _this.radiusScale(d.radius());
      });
    };

    DiscoverChart.prototype.order = function(a, b) {
      return b.radius() - a.radius();
    };

    DiscoverChart.prototype.popup = function(action, scope) {
      var self;
      self = this;
      return function(d, i) {
        switch (action) {
          case 'hide':
            return self.popupView.hide();
          case 'show':
            return self.popupView.setData(d, $(this), scope);
        }
      };
    };

    DiscoverChart.prototype.addToComparison = function(document, index) {
      return app.view.comparisonData.add(document);
    };

    DiscoverChart.prototype.renderChart = function() {
      var data, languages,
        _this = this;
      this.setRadiusScale();
      languages = _.keys(this.collection.filters);
      if (languages.length > 0) {
        data = this.collection.filter(function(module) {
          return $.inArray(module.get("_source").language, languages) !== -1;
        });
      } else {
        data = this.collection.models;
      }
      this.dot = this.dots.selectAll(".dot").data(data);
      this.dot.enter().append("circle").attr("class", "dot").on("mouseover", this.popup('show', this.$el)).on("mouseout", this.popup('hide')).on("click", this.addToComparison);
      this.dot.transition().style("fill", function(moduleModel) {
        return _this.colorScale(moduleModel.color());
      }).call(this.position);
      this.dot.exit().transition().attr("r", 0).remove();
      this.dot.append("title").text(function(d) {
        return d.get("_source").module_name;
      });
      this.dot.sort(this.order);
      return this;
    };

    DiscoverChart.prototype.render = function() {
      var _this = this;
      this.xAxis = d3.svg.axis().orient("bottom").scale(this.xScale).tickValues([0.5, 1.5, 2.5, 3.5]).tickFormat(this.formatterX);
      this.yAxis = d3.svg.axis().scale(this.yScale).orient("left").tickValues([1]).tickFormat(function(d, i) {
        if (d === 1) {
          return "100%";
        } else {
          return "";
        }
      });
      this.svg = d3.select(this.$el[0]).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate( " + this.margin.left + " , " + this.margin.top + " )");
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0, " + this.height + " )").call(this.xAxis);
      this.svg.append("g").attr("class", "y axis").call(this.yAxis);
      this.svg.append("text").attr("class", "x label").attr("text-anchor", "middle").attr("x", this.width / 2).attr("y", this.height + this.margin.bottom - 10).text("Last commit");
      this.svg.append("text").attr("class", "y label").attr("text-anchor", "middle").attr("y", 6).attr("x", -this.height / 2).attr("dy", "-1em").attr("transform", "rotate(-90)").text("Relevance");
      this.dots = this.svg.append("g").attr("class", "dots");
      return this;
    };

    return DiscoverChart;

  })(View);
  return exports.Discover = (function(_super) {

    __extends(Discover, _super);

    function Discover() {
      return Discover.__super__.constructor.apply(this, arguments);
    }

    Discover.prototype.events = {
      'submit .search-form': 'searchSubmit'
    };

    Discover.prototype.initialize = function() {
      var qs;
      console.log('[__discoverView__] Init');
      _.bindAll(this, "fetchSearchData", "render", "searchSubmit");
      qs = root.help.qs.parse(location.search);
      if (qs.q != null) {
        this.context.discover_search_query = decodeURI(qs.q);
      }
      this.context.discover_search_action = "/discover";
      this.render();
      /*
        initializing chart
      */

      this.chartData = new root.collections.Discovery;
      this.comparisonData = new root.collections.DiscoveryComparison;
      this.filter = new exports.DiscoverFilter({
        el: this.$(".filter"),
        collection: this.chartData
      });
      this.chart = new exports.DiscoverChart({
        el: this.$("#searchChart"),
        collection: this.chartData
      });
      this.comparison = new exports.DiscoverComparison({
        el: this.$("#moduleComparison"),
        collection: this.comparisonData
      });
      if (qs.q != null) {
        return this.fetchSearchData(qs.q);
      }
    };

    Discover.prototype.searchSubmit = function(e) {
      var pathname, q;
      e.preventDefault();
      q = this.$("[name=q]").val();
      pathname = window.location.pathname;
      app.navigate("" + pathname + "?q=" + q, {
        trigger: false
      });
      return this.fetchSearchData(q);
    };

    Discover.prototype.fetchSearchData = function(query) {
      return this.chart.collection.fetch(query);
    };

    Discover.prototype.render = function() {
      var html;
      html = views['discover/index'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'discover');
      return this;
    };

    return Discover;

  })(View);
}).call(this, window.views);
