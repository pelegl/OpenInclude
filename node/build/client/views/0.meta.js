// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(exports) {
  var View, col, root, views;
  root = this;
  views = this.hbt = Handlebars.partials;
  col = root.collections;
  exports.MetaView = (function(_super) {

    __extends(MetaView, _super);

    function MetaView() {
      return MetaView.__super__.constructor.apply(this, arguments);
    }

    MetaView.prototype.events = {};

    MetaView.prototype.initialize = function() {
      this.Languages = new col.Language;
      return console.log('[__metaView__] Init');
    };

    return MetaView;

  })(this.Backbone.View);
  exports.Loader = (function(_super) {

    __extends(Loader, _super);

    function Loader() {
      return Loader.__super__.constructor.apply(this, arguments);
    }

    Loader.prototype.tagName = 'img';

    Loader.prototype.attributes = {
      src: "/static/images/loader.gif"
    };

    return Loader;

  })(this.Backbone.View);
  exports.Agreement = (function(_super) {

    __extends(Agreement, _super);

    function Agreement() {
      return Agreement.__super__.constructor.apply(this, arguments);
    }

    Agreement.prototype.tagName = 'div';

    Agreement.prototype.className = 'row-fluid agreementContainer';

    Agreement.prototype.events = {
      'submit form': 'processSubmit'
    };

    Agreement.prototype.processSubmit = function(e) {
      var isChecked;
      e.preventDefault();
      /*
        Perform async form process
      */

      isChecked = this.$("[name=signed]").prop("checked");
      if (isChecked) {
        this.model.save({
          signed: "signed"
        });
      } else {

      }
      return false;
    };

    Agreement.prototype.signed = function() {
      return app.navigate(app.conf.profile_url, {
        trigger: true
      });
    };

    Agreement.prototype.initialize = function() {
      var action, agreement, _ref;
      this.model = new models.Tos;
      if ($(".agreementContainer").length > 0) {
        this.setElement($(".agreementContainer"));
      } else {
        this.render();
      }
      _ref = this.options, agreement = _ref.agreement, action = _ref.action;
      this.listenTo(this, "init", this.niceScroll);
      this.listenTo(this.model, "sync", this.signed);
      return this.setData(agreement, action);
    };

    Agreement.prototype.renderData = function() {
      var output;
      output = views['member/agreement'](this.context);
      this.$el.html($(output).unwrap().html());
      return this.trigger("init");
    };

    Agreement.prototype.setData = function(agreement, action) {
      console.log(arguments);
      this.context = {
        agreement_text: agreement,
        agreement_signup_action: action
      };
      this.model.url = this.context.agreement_signup_action;
      return this.renderData();
    };

    Agreement.prototype.niceScroll = function() {
      if (this.$(".agreementText").is(":visible")) {
        this.$(".agreementText").niceScroll();
      }
      return this.delegateEvents();
    };

    Agreement.prototype.render = function() {
      var html;
      html = views['member/agreement'](this.context || {});
      this.$el = $(html);
      this.delegateEvents();
      return this;
    };

    return Agreement;

  })(this.Backbone.View);
  root.View = View = (function(_super) {

    __extends(View, _super);

    View.prototype.tagName = 'section';

    View.prototype.className = 'contents';

    View.prototype.viewsPlaceholder = '#view-wrapper';

    function View(opts) {
      if (opts == null) {
        opts = {};
      }
      this.context = _.extend({}, app.conf);
      if (opts.el == null) {
        opts.el = $("<section class='contents' />");
        if (app.meta.$('.contents').length > 0) {
          app.meta.$('.contents').replaceWith(opts.el);
        } else {
          app.meta.$el.append(opts.el);
        }
      } else {
        $(window).scrollTop(0);
      }
      View.__super__.constructor.call(this, opts);
    }

    return View;

  })(this.Backbone.View);
  exports.Index = (function(_super) {

    __extends(Index, _super);

    function Index() {
      return Index.__super__.constructor.apply(this, arguments);
    }

    Index.prototype.initialize = function() {
      console.log('[__indexView__] Init');
      this.context.title = "Home Page";
      return this.render();
    };

    Index.prototype.render = function() {
      var html;
      html = views['index'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'index');
      return this;
    };

    return Index;

  })(View);
  return exports.ShareIdeas = (function(_super) {

    __extends(ShareIdeas, _super);

    function ShareIdeas() {
      return ShareIdeas.__super__.constructor.apply(this, arguments);
    }

    ShareIdeas.prototype.events = {
      'click .share-ideas': 'toggleShow',
      'click .close': 'toggleShow',
      'click .submit': 'submit'
    };

    ShareIdeas.prototype.initialize = function() {
      return console.log('[__ShareIdeasView__] Init');
    };

    ShareIdeas.prototype.toggleShow = function() {
      return $('.share-common').toggleClass('show');
    };

    ShareIdeas.prototype.submit = function() {
      var $email, $ideas, $self;
      $email = $('#email');
      $ideas = $('#ideas');
      $self = $('.submit');
      $self.addClass('disabled');
      $self.html("<img src=\"" + app.conf.STATIC_URL + "images/loader.gif\" alt=\"Loading...\" class=\"loader\" />");
      return $.post('/share-idea', {
        email: $email.val(),
        ideas: $ideas.val()
      }, function(data) {
        if (data.status === 'success') {
          $self.html('Success');
        } else {
          $self.html('Error occured');
        }
        return setTimeout(function() {
          $('.share-common').toggleClass('show');
          return setTimeout(function() {
            $self.removeClass('disabled').html('Submit');
            $email.val('');
            return $ideas.val('');
          }, 500);
        }, 1000);
      });
    };

    return ShareIdeas;

  })(this.Backbone.View);
}).call(this, window.views = {});
