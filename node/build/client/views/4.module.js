// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(exports) {
  var modules_url, qs, root, views;
  root = this;
  views = this.hbt = Handlebars.partials;
  qs = root.help.qs;
  modules_url = "/modules";
  /*
    @constructor
    Multi series chart view
  */

  exports.MultiSeries = (function(_super) {

    __extends(MultiSeries, _super);

    function MultiSeries() {
      return MultiSeries.__super__.constructor.apply(this, arguments);
    }

    MultiSeries.prototype.initialize = function(opts) {
      var className,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _.bindAll(this);
      this.margin = {
        top: 20,
        right: 200,
        bottom: 30,
        left: 50
      };
      this.width = this.$el.width() - this.margin.right - this.margin.left;
      this.height = 500 - this.margin.top - this.margin.bottom;
      this.x = d3.time.scale().range([0, this.width]);
      this.y = d3.scale.linear().range([this.height, 0]);
      this.color = d3.scale.category10();
      this.xAxis = d3.svg.axis().scale(this.x).orient("bottom");
      this.yAxis = d3.svg.axis().scale(this.y).orient("left");
      this.line = d3.svg.line().x(function(d) {
        return _this.x(d.x());
      }).y(function(d) {
        return _this.y(d.y());
      });
      className = this.$el.attr("class");
      return this.svg = d3.select("." + className).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
    };

    MultiSeries.prototype.render = function() {
      var max, min, question, questions,
        _this = this;
      this.color.domain(this.collection.keys());
      questions = this.color.domain().map(this.collection.chartMap);
      this.x.domain(d3.extent(this.collection.models, function(d) {
        return d.x();
      }));
      min = d3.min(questions, function(c) {
        return d3.min(c.values, function(v) {
          return v.y();
        });
      });
      max = d3.max(questions, function(c) {
        return d3.max(c.values, function(v) {
          return v.y();
        });
      });
      this.y.domain([0.5 * min, 1.1 * max]);
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis);
      this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Questions");
      question = this.svg.selectAll(".question").data(questions).enter().append("g").attr("class", "question");
      question.append("path").attr("class", "line").attr("d", function(d) {
        return _this.line(d.values);
      }).style("stroke", function(d) {
        return _this.color(d.name);
      });
      question.append("text").datum(function(d) {
        return {
          name: d.name,
          value: d.values[d.values.length - 1]
        };
      }).attr("transform", function(d) {
        return "translate(" + _this.x(d.value.x()) + "," + _this.y(d.value.y()) + ")";
      }).attr("x", 10).attr("dy", ".35em").text(function(d) {
        return d.name;
      });
      return this;
    };

    return MultiSeries;

  })(this.Backbone.View);
  /*
    @constructor
    Repository view
  */

  exports.Repo = (function(_super) {

    __extends(Repo, _super);

    function Repo() {
      return Repo.__super__.constructor.apply(this, arguments);
    }

    Repo.prototype.events = {};

    Repo.prototype.initialize = function(opts) {
      var preloadedData, repo, _ref;
      if (opts == null) {
        opts = {};
      }
      this.language = opts.language, repo = opts.repo;
      try {
        _ref = repo.split("|"), this.owner = _ref[0], this.repo = _ref[1];
        if (!this.owner || !this.repo) {
          throw "Incorrect link";
        }
      } catch (e) {
        console.log(e);
      }
      this.model = new models.Repo({
        language: this.language,
        module_name: this.repo,
        owner: this.owner
      });
      /*
        context
      */

      this.context = {
        modules_url: modules_url
      };
      /*
        events
      */

      _.bindAll(this);
      this.listenTo(this.model, "sync", this.render);
      this.listenTo(this.model, "sync", this.initCharts);
      this.collections = {};
      this.charts = {};
      /*
        setup render and load data
      */

      preloadedData = this.$("[data-repo]");
      if (preloadedData.length > 0) {
        this.model.set(preloadedData.data("repo"), {
          silent: true
        });
        this.render();
        return this.initCharts();
      } else {
        return this.model.fetch();
      }
    };

    Repo.prototype.initCharts = function() {
      /*
        inits
      */
      this.initSO();
      /*
        Setup listeners
      */

      this.listenTo(this.collections.stackOverflow, "sync", this.charts.stackOverflow.render);
      /*
        Start fetching data
      */

      return this.collections.stackOverflow.fetch();
    };

    Repo.prototype.initSO = function() {
      var options, so;
      options = {
        language: this.language,
        owner: this.owner,
        repo: this.repo
      };
      this.collections.stackOverflow = so = new collections.StackOverflowQuestions(options);
      return this.charts.stackOverflow = new exports.MultiSeries({
        el: this.$(".stackQAHistory"),
        collection: so
      });
    };

    Repo.prototype.render = function() {
      var html;
      this.context.module = this.model.toJSON();
      html = views['module/view'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'module-list');
      return this;
    };

    return Repo;

  })(View);
  exports.ModuleList = (function(_super) {

    __extends(ModuleList, _super);

    function ModuleList() {
      return ModuleList.__super__.constructor.apply(this, arguments);
    }

    ModuleList.prototype.events = {
      'click .pagination a': "changePage"
    };

    ModuleList.prototype.initialize = function(opts) {
      var data, limit, page, preloadedData, _ref;
      console.log('[__ModuleListView__] Init');
      this.language = opts.language;
      this.context = {
        modules_url: modules_url,
        language: this.language.capitalize()
      };
      _ref = qs.parse(window.location.search), page = _ref.page, limit = _ref.limit;
      page = page ? parseInt(page) : 0;
      limit = limit ? parseInt(limit) : 30;
      /*
        Init collection
      */

      this.collection = new collections.Modules(null, {
        language: this.language
      });
      this.listenTo(this.collection, "sync", this.render);
      preloadedData = this.$("[data-modules]");
      if (preloadedData.length > 0) {
        data = preloadedData.data("modules");
        this.collection.preload_data(page, limit, data.modules, data.total_count);
        return this.render();
      } else {
        this.$el.append(new exports.Loader);
        return this.collection.pager();
      }
    };

    ModuleList.prototype.changePage = function(e) {
      var href, loader, page, view;
      href = $(e.currentTarget).attr("href");
      if (href) {
        page = href.replace(/.*page=([0-9]+).*/, "$1");
        page = page ? parseInt(page) : 0;
        delete this.context.prev;
        delete this.context.next;
        view = this.$("ul[data-modules]");
        view.height(view.height());
        loader = new exports.Loader().$el;
        view.html("").append($("<li />").append(loader));
        return this.collection.goTo(page, {
          update: true,
          remove: false
        });
      }
    };

    ModuleList.prototype.render = function() {
      var currentPage, html, i, totalPages, _i, _ref;
      this.context.modules = this.collection.toJSON();
      _ref = this.collection.info(), totalPages = _ref.totalPages, currentPage = _ref.currentPage;
      if (totalPages > 0) {
        this.context.pages = [];
        for (i = _i = 1; 1 <= totalPages ? _i <= totalPages : _i >= totalPages; i = 1 <= totalPages ? ++_i : --_i) {
          this.context.pages.push({
            text: i,
            link: i - 1,
            isActive: currentPage + 1 === i
          });
        }
        if (currentPage > 0) {
          this.context.prev = (currentPage - 1).toString();
        }
        if (totalPages - 1 > currentPage) {
          this.context.next = currentPage + 1;
        }
      } else {
        delete this.context.pages;
      }
      html = views['module/modules'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'module-list');
      return this;
    };

    return ModuleList;

  })(View);
  return exports.Languages = (function(_super) {

    __extends(Languages, _super);

    function Languages() {
      return Languages.__super__.constructor.apply(this, arguments);
    }

    Languages.prototype.events = {
      'click .pagination a': "changePage"
    };

    Languages.prototype.initialize = function() {
      var data, limit, page, preloadedData, _ref;
      console.log('[__ModuleViewInit__] Init');
      /*
        Context
      */

      this.context.modules_url = modules_url;
      /*
        QS limits
      */

      _ref = qs.parse(window.location.search), page = _ref.page, limit = _ref.limit;
      page = page ? parseInt(page) : 0;
      limit = limit ? parseInt(limit) : 30;
      this.collection = app.meta.Languages;
      this.listenTo(this.collection, "sync", this.render);
      /*
        Pager setup
      */

      preloadedData = this.$("[data-languages]");
      if (preloadedData.length > 0) {
        data = preloadedData.data("languages");
        this.collection.preload_data(page, limit, data.languages, data.total_count);
        return this.render();
      } else {
        this.$el.append(new exports.Loader);
        return this.collection.pager();
      }
    };

    Languages.prototype.changePage = function(e) {
      var href, loader, page, view;
      href = $(e.currentTarget).attr("href");
      if (href) {
        page = href.replace(/.*page=([0-9]+).*/, "$1");
        page = page ? parseInt(page) : 0;
        delete this.context.prev;
        delete this.context.next;
        view = this.$("ul[data-languages]");
        view.height(view.height());
        loader = new exports.Loader().$el;
        view.html("").append($("<li />").append(loader));
        return this.collection.goTo(page, {
          update: true,
          remove: false
        });
      }
    };

    Languages.prototype.render = function() {
      var currentPage, html, i, totalPages, _i, _ref;
      this.context.languages = this.collection.toJSON();
      _ref = this.collection.info(), totalPages = _ref.totalPages, currentPage = _ref.currentPage;
      if (totalPages > 0) {
        this.context.pages = [];
        for (i = _i = 1; 1 <= totalPages ? _i <= totalPages : _i >= totalPages; i = 1 <= totalPages ? ++_i : --_i) {
          this.context.pages.push({
            text: i,
            link: i - 1,
            isActive: currentPage + 1 === i
          });
        }
        if (currentPage > 0) {
          this.context.prev = (currentPage - 1).toString();
        }
        if (totalPages - 1 > currentPage) {
          this.context.next = currentPage + 1;
        }
      } else {
        delete this.context.pages;
      }
      html = views['module/index'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'language-list');
      return this;
    };

    return Languages;

  })(View);
}).call(this, window.views);
