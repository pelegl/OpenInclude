// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(exports) {
  var agreement_text, root, views;
  agreement_text = "On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. ";
  root = this;
  views = this.hbt = Handlebars.partials;
  exports.SignIn = (function(_super) {

    __extends(SignIn, _super);

    function SignIn() {
      return SignIn.__super__.constructor.apply(this, arguments);
    }

    SignIn.prototype.initialize = function() {
      console.log('[_signInView__] Init');
      this.context.title = "Authentication";
      return this.render();
    };

    SignIn.prototype.render = function() {
      var html;
      html = views['registration/login'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'registration');
      return this;
    };

    return SignIn;

  })(View);
  exports.CC = (function(_super) {

    __extends(CC, _super);

    function CC() {
      return CC.__super__.constructor.apply(this, arguments);
    }

    CC.prototype.className = "dropdown-menu";

    CC.prototype.events = {
      'click  form': "stopPropagation",
      'submit form': "updateCardData"
    };

    CC.prototype.stopPropagation = function(e) {
      console.log("prop");
      return e.stopPropagation();
    };

    CC.prototype.updateCardData = function(e) {
      var data;
      e.preventDefault();
      data = Backbone.Syphon.serialize(e.currentTarget);
      this.$("[type=submit]").addClass("disabled").text("Updating information...");
      console.log(data);
      this.model.set(data);
      this.model.save(null, {
        success: this.processUpdate,
        error: this.processUpdate
      });
      return false;
    };

    CC.prototype.processUpdate = function(model, response, options) {
      if (response.success === true) {
        return app.session.set({
          has_stripe: true
        });
      } else {

      }
    };

    CC.prototype.initialize = function() {
      var $el;
      this.model = new models.CreditCard;
      this.model.url = app.conf.update_credit_card;
      _.bindAll(this, "processUpdate");
      this.context = _.extend({}, app.conf);
      $el = $(".setupPayment .dropdown-menu");
      if ($el.length > 0) {
        return this.setElement($el);
      } else {
        return this.render();
      }
    };

    CC.prototype.render = function() {
      var html;
      html = views['member/credit_card'](this.context);
      this.$el.html($(html).html());
      return this;
    };

    return CC;

  })(this.Backbone.View);
  return exports.Profile = (function(_super) {

    __extends(Profile, _super);

    function Profile() {
      return Profile.__super__.constructor.apply(this, arguments);
    }

    Profile.prototype.events = {
      'click .accountType a': "accountUpgrade",
      'click .setupPayment > button': "update_cc_events"
    };

    Profile.prototype.update_cc_events = function(e) {
      this.cc.delegateEvents();
      return $(e.currentTarget).dropdown('toggle');
    };

    Profile.prototype.clearHref = function(href) {
      return href.replace("/" + this.context.profile_url, "");
    };

    Profile.prototype.accountUpgrade = function(e) {
      var $this, href;
      $this = $(e.currentTarget);
      href = $this.attr("href");
      this.setAction(this.clearHref(href));
      return false;
    };

    Profile.prototype.setAction = function(action) {
      var dev, merc;
      dev = this.clearHref(this.context.developer_agreement);
      merc = this.clearHref(this.context.merchant_agreement);
      if (action === dev && app.session.get("employee") === false) {
        /*
          show developer license agreement
        */

        app.navigate(this.context.developer_agreement, {
          trigger: false
        });
        this.agreement.$el.show();
        return this.agreement.setData(agreement_text, this.context.developer_agreement);
      } else if (action === merc && app.session.get("merchant") === false) {
        /*
          show client license agreement
        */

        app.navigate(this.context.merchant_agreement, {
          trigger: false
        });
        this.agreement.$el.show();
        return this.agreement.setData(agreement_text, this.context.merchant_agreement);
      } else {
        /*
          hide agreement and navigate back to profile
        */

        this.agreement.$el.hide();
        return app.navigate(this.context.profile_url, {
          trigger: false
        });
      }
    };

    Profile.prototype.initialize = function() {
      console.log('[__profileView__] Init');
      this.context.title = "Personal Profile";
      this.agreement = new exports.Agreement;
      this.cc = new exports.CC;
      this.listenTo(this.model, "all", this.render);
      this.model.fetch();
      return this.render();
    };

    Profile.prototype.render = function() {
      var html;
      this.context.user = this.model.toJSON();
      html = views['member/profile'](this.context);
      this.$el.html(html);
      this.$el.attr('view-id', 'profile');
      this.$(".informationBox").append(this.agreement.$el);
      this.cc.setElement(this.$(".setupPayment .dropdown-menu"));
      this.cc.$el.prev().dropdown();
      this.setAction(this.options.action);
      return this;
    };

    return Profile;

  })(View);
}).call(this, window.views);
