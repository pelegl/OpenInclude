// Generated by CoffeeScript 1.6.1

(function(exports, isServer) {
  var helpers;
  if (isServer) {
    this.Backbone = require('backbone');
  }
  helpers = {
    oneDay: 1000 * 60 * 60 * 24
  };
  exports.Session = this.Backbone.Model.extend({
    idAttribute: "_id",
    url: "/session"
  });
  exports.Tos = this.Backbone.Model.extend({});
  exports.CreditCard = this.Backbone.Model.extend({});
  exports.Language = this.Backbone.Model.extend({
    idAttribute: "name",
    urlRoot: "/modules"
  });
  exports.Repo = this.Backbone.Model.extend({
    idAttribute: "_id",
    urlRoot: "/modules",
    url: function() {
      return "" + this.urlRoot + "/" + (this.get('language')) + "/" + (this.get('owner')) + "|" + (this.get('module_name'));
    }
  });
  exports.StackOverflowQuestion = this.Backbone.Model.extend({
    idAttribute: "_id",
    urlRoot: "/modules",
    url: function() {
      return "" + this.urlRoot + "/all/all/stackoverflow/json/" + (this.get('_id'));
    },
    date: function() {
      return new Date(this.get("timestamp") * 1000);
    },
    x: function() {
      return this.get("timestamp") * 1000;
    },
    y: function() {
      return this.get("amount");
    }
  });
  return exports.Discovery = this.Backbone.Model.extend({
    /*        
        0.5 - super active - up to 7 days
        1.5 - up to 30 days
        2.5 - up to 180 days
        3.5 - more than 180
    */

    idAttribute: "_id",
    x: function() {
      var currentDate, datesDifference, difference_ms, lastCommit, lastCommitBucket, self,
        _this = this;
      self = this.get('_source');
      lastCommit = new Date(self.pushed_at).getTime();
      currentDate = new Date().getTime();
      difference_ms = currentDate - lastCommit;
      datesDifference = Math.round(difference_ms / helpers.oneDay);
      lastCommitBucket = function(difference) {
        if (difference > 180) {
          return 3.5;
        } else if (difference <= 7) {
          return 0.5;
        } else if (difference <= 30) {
          return 1.5;
        } else {
          return 2.5;
        }
      };
      return lastCommitBucket(datesDifference);
    },
    /*
      Sets y based on relevance, min: 0, max: 1
    */

    y: function(maxScore) {
      var score;
      score = this.get('_score');
      return score / maxScore;
    },
    /*
      Sets radius of the circles
    */

    radius: function() {
      var watchers;
      watchers = this.get('_source').watchers;
      return 10 + watchers * 5;
    },
    /*
      Color of the bubble
      TODO: make color persist in different searches
    */

    color: function() {
      return this.get('_source').language;
    },
    /*
      Key
    */

    key: function() {
      return this.id;
    },
    /*
      last commit - human
    */

    lastCommitHuman: function() {
      return humanize.relativeTime(new Date(this.get('_source').pushed_at).getTime() / 1000);
    },
    /*
      overwrite toJSON, so we can add attributes from functions for hbs
    */

    toJSON: function(options) {
      var attr;
      attr = _.clone(this.attributes);
      attr.lastCommitHuman = this.lastCommitHuman();
      return attr;
    }
  });
}).call(this, (typeof exports === "undefined" ? this["models"] = {} : exports), typeof exports !== "undefined");
