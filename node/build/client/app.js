// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(exports) {
  var App, conf;
  conf = {
    STATIC_URL: "/static/",
    in_stealth_mode: false,
    logout_url: "/auth/logout",
    profile_url: "profile",
    signin_url: "profile/login",
    github_auth_url: "/auth/github",
    discover_url: "discover",
    how_to_url: "how-to",
    modules_url: 'modules',
    merchant_agreement: '/profile/merchant_agreement',
    developer_agreement: '/profile/developer_agreement',
    update_credit_card: '/profile/update_credit_card'
  };
  App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.conf = conf;

    App.prototype.init = function() {
      var hash;
      if (!Backbone.history._hasPushState) {
        hash = Backbone.history.getHash();
        this.navigate('', {
          trigger: false
        });
        return this.navigate(hash, {
          trigger: true
        });
      }
    };

    App.prototype.reRoute = function() {
      if (!Backbone.history._hasPushState && Backbone.history.getFragment().slice(0, 2) !== '!/') {
        this.navigate('!/' + Backbone.history.getFragment(), {
          trigger: true
        });
        return document.location.reload();
      }
    };

    App.prototype.go = function(fr, opts) {
      if (opts == null) {
        opts = {
          trigger: true
        };
      }
      if (Backbone.history._hasPushState) {
        return exports.app.navigate(fr, opts);
      } else {
        if (fr.slice(0, 1) === '!') {
          return exports.app.navigate(fr, opts);
        } else {
          return exports.app.navigate('!/' + fr, opts);
        }
      }
    };

    App.prototype.index = function() {
      this.reRoute();
      return this.view = new views.Index({
        prevView: this.view
      });
    };

    App.prototype.profile = function(action) {
      this.reRoute();
      if (app.session.get("is_authenticated") === true) {
        return this.view = new views.Profile({
          prevView: this.view,
          model: app.session,
          action: "/" + action
        });
      } else {
        return app.navigate('/profile/login', {
          trigger: true
        });
      }
    };

    App.prototype['how-to'] = function() {
      this.reRoute();
      return this.view = new views.HowTo({
        prevView: this.view
      });
    };

    App.prototype.login = function() {
      this.reRoute();
      console.log("login", app.session.get("is_authenticated") === true);
      if (app.session.get("is_authenticated") === true) {
        return app.navigate('/profile', {
          trigger: true
        });
      } else {
        return this.view = new views.SignIn({
          prevView: this.view
        });
      }
    };

    App.prototype.discover = function() {
      this.reRoute();
      return this.view = new views.Discover({
        prevView: this.view
      });
    };

    App.prototype.language_list = function() {
      this.reRoute();
      return this.view = new views.Languages({
        el: $('.contents'),
        prevView: this.view
      });
    };

    App.prototype.repo_list = function(language) {
      this.reRoute();
      return this.view = new views.ModuleList({
        el: $('.contents'),
        prevView: this.view,
        language: language
      });
    };

    App.prototype.repo = function(language, repo) {
      this.reRoute();
      return this.view = new views.Repo({
        el: $('.contents'),
        prevView: this.view,
        language: language,
        repo: repo
      });
    };

    return App;

  })(Backbone.Router);
  return $(document).ready(function() {
    var app, route_keys, route_paths,
      _this = this;
    route_keys = ["", "!/", conf.discover_url, "!/" + conf.discover_url, conf.signin_url, "!/" + conf.signin_url, conf.profile_url, "!/" + conf.profile_url, "" + conf.profile_url + "/:action", "!/" + conf.profile_url + "/:action", conf.how_to_url, "!/" + conf.how_to_url, conf.modules_url, "!/" + conf.modules_url, "" + conf.modules_url + "/:language", "!/" + conf.modules_url + "/:language", "" + conf.modules_url + "/:language/:repo", "!/" + conf.modules_url + "/:language/:repo"];
    route_paths = ["index", "index", "discover", "discover", "login", "login", "profile", "profile", "profile", "profile", "how-to", "how-to", "language_list", "language_list", "repo_list", "repo_list", "repo", "repo"];
    App.prototype.routes = _.object(route_keys, route_paths);
    console.log('[__app__] init done!');
    exports.app = app = new App();
    app.meta = new views.MetaView({
      el: $('body')
    });
    app.shareIdeas = new views.ShareIdeas({
      el: $('.share-common')
    });
    app.session = new models.Session();
    app.session.fetch();
    return app.session.once("change", function() {
      Backbone.history.start({
        pushState: true
      });
      app.init();
      return $(document).delegate("a", "click", function(e) {
        var href, path, search, uri;
        href = e.currentTarget.getAttribute('href');
        if (!href) {
          return true;
        }
        if (href[0] === '/' && !/^\/auth\/.*/i.test(href)) {
          uri = Backbone.history._hasPushState ? e.currentTarget.getAttribute('href').slice(1) : "!/" + e.currentTarget.getAttribute('href').slice(1);
          app.navigate(uri, {
            trigger: true
          });
          return false;
        } else if (href[0] === '?') {
          path = window.location.pathname;
          search = href;
          app.navigate("" + path + search, {
            trigger: false
          });
          return false;
        }
      });
    });
  });
})(window);
