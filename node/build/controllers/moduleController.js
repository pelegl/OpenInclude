// Generated by CoffeeScript 1.6.1
/*
  Loading config
*/

var Languages, ModuleController, Repo, STATIC_URL, discover_url, get_models, github_auth_url, how_to_url, logout_url, modules_url, profile_url, signin_url, _, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

_ref = require('../conf'), get_models = _ref.get_models, STATIC_URL = _ref.STATIC_URL, logout_url = _ref.logout_url, signin_url = _ref.signin_url, profile_url = _ref.profile_url, github_auth_url = _ref.github_auth_url, discover_url = _ref.discover_url, how_to_url = _ref.how_to_url, modules_url = _ref.modules_url;

/*
  Getting module
*/


_ref1 = get_models(["Language", "Module"]), Languages = _ref1[0], Repo = _ref1[1];

ModuleController = (function(_super) {

  __extends(ModuleController, _super);

  function ModuleController(req, res) {
    var path, segments;
    this.req = req;
    this.res = res;
    path = this.req.path;
    segments = _.without(path.split("/"), "");
    if (segments[1] != null) {
      this.language = segments[1];
    }
    if (segments[2] != null) {
      this.moduleName = segments[2];
    }
    if (segments.length > 3) {
      this.get = segments.slice(3);
    }
    this.app = this.req.app;
    this.context = {
      title: "Home Page",
      STATIC_URL: STATIC_URL,
      in_stealth_mode: false,
      user: this.req.user,
      logout_url: logout_url,
      signin_url: signin_url,
      profile_url: profile_url,
      github_auth_url: github_auth_url,
      discover_url: discover_url,
      how_to_url: how_to_url,
      modules_url: modules_url
    };
    if (!this.language) {
      this.index();
    } else if (this.moduleName) {
      this.context.language = this.language.capitalize();
      this.module();
    } else if (this.language) {
      this.context.language = this.language.capitalize();
      this.module_list();
    } else {
      res.send("error", 404);
    }
  }

  /*
    Index - returns set of languages
  */


  ModuleController.prototype.index = function() {
    var limit, page, pageNumber, _ref2,
      _this = this;
    _ref2 = this.req.query, page = _ref2.page, limit = _ref2.limit;
    pageNumber = page ? parseInt(page) : 0;
    limit = limit ? parseInt(limit) : 30;
    return Languages.get_page(pageNumber, limit, function(err, output) {
      var i, totalPages, _i;
      if (!err) {
        if (_this.req.xhr) {
          return _this.res.json(output);
        } else {
          totalPages = Math.ceil(output.total_count / limit);
          if (totalPages > 0) {
            _this.context.pages = [];
            for (i = _i = 1; 1 <= totalPages ? _i <= totalPages : _i >= totalPages; i = 1 <= totalPages ? ++_i : --_i) {
              _this.context.pages.push({
                text: i,
                isActive: pageNumber - 1 === i
              });
            }
            if (pageNumber > 0) {
              _this.context.prev = (pageNumber - 1).toString();
            }
            if (totalPages - 1 > pageNumber) {
              _this.context.next = pageNumber + 1;
            }
          }
          _this.context.prepopulation = JSON.stringify(output);
          _this.context.languages = output.languages;
          _this.context.body = _this._view('module/index', _this.context);
          return _this.res.render('base', _this.context);
        }
      } else {
        console.error(err);
        return res.send("Error", 500);
      }
    });
  };

  ModuleController.prototype.module_list = function() {
    var limit, lmit, page, pageNumber, _ref2,
      _this = this;
    _ref2 = this.req.query, page = _ref2.page, lmit = _ref2.lmit;
    pageNumber = page ? parseInt(page) : 0;
    limit = limit ? parseInt(limit) : 30;
    return Languages.get_siblings(this.language, pageNumber, limit, function(err, output) {
      var i, totalPages, _i;
      if (!err) {
        if (_this.req.xhr) {
          return _this.res.json(output);
        } else {
          totalPages = Math.ceil(output.total_count / limit);
          if (totalPages > 0) {
            _this.context.pages = [];
            for (i = _i = 1; 1 <= totalPages ? _i <= totalPages : _i >= totalPages; i = 1 <= totalPages ? ++_i : --_i) {
              _this.context.pages.push({
                text: i,
                isActive: pageNumber - 1 === 1
              });
            }
            if (pageNumber > 0) {
              _this.context.prev = (pageNumber - 1).toString();
            }
            if (totalPages - 1 > pageNumber) {
              _this.context.next = pageNumber + 1;
            }
          }
          _this.context.prepopulation = JSON.stringify(output);
          _this.context.modules = output.modules;
          _this.context.body = _this._view('module/modules', _this.context);
          return _this.res.render('base', _this.context);
        }
      } else {
        console.error(err);
        return res.send("Error", 500);
      }
    });
  };

  ModuleController.prototype.module = function() {
    var format, requiredData, _ref2,
      _this = this;
    if (this.get != null) {
      _ref2 = this.get, requiredData = _ref2[0], format = _ref2[1];
    }
    if (requiredData === 'stackoverflow' && format === 'json') {
      return Repo.get_module(this.moduleName, function(err, module) {
        if (err || !module) {
          return _this.res.json({
            err: err,
            success: false
          }, 404);
        }
        return module.get_questions(function(err, resp) {
          if (err != null) {
            return _this.res.json({
              err: err,
              success: false
            });
          }
          return _this.res.json(resp);
        });
      });
    } else if (requiredData === 'github_events' && format === 'json') {

    } else {
      return Repo.get_module(this.moduleName, function(err, module) {
        if (!err && module) {
          if (_this.req.xhr) {
            return _this.res.json(module);
          } else {
            _this.context.prepopulate = JSON.stringify(module);
            _this.context.module = module;
            _this.context.body = _this._view('module/view', _this.context);
            return _this.res.render('base', _this.context);
          }
        } else {
          if (err != null) {
            console.log(err);
          }
          return _this.res.send("Not found", 404);
        }
      });
    }
  };

  return ModuleController;

})(require('./basicController'));

module.exports = function(req, res) {
  return new ModuleController(req, res);
};
