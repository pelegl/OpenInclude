// Generated by CoffeeScript 1.6.1
var ProfileController, Stripe, agreement_text, get_models, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

agreement_text = "On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains. ";

get_models = require('../conf').get_models;

Stripe = get_models(["Stripe"])[0];

ProfileController = (function(_super) {

  __extends(ProfileController, _super);

  function ProfileController() {
    return ProfileController.__super__.constructor.apply(this, arguments);
  }

  ProfileController.prototype.index = function() {
    this.context.title = 'User Profile';
    this.context.body = this._view('member/profile', this.context);
    return this.res.render('base', this.context);
  };

  ProfileController.prototype.login = function() {
    this.context.title = "Authentication";
    this.context.body = this._view('registration/login', this.context);
    return this.res.render('base', this.context);
  };

  ProfileController.prototype._generateAgreementField = function(text, action) {
    var agreement;
    agreement = {
      agreement_signup_action: action,
      agreement_text: text
    };
    this.context.informationBox = this._view('member/agreement', agreement);
    return this.index();
  };

  ProfileController.prototype._acceptToa = function(accountType) {
    var signed,
      _this = this;
    signed = this.req.body.signed;
    if (signed === 'signed') {
      switch (accountType) {
        case 'merchant':
          this.req.user.merchant = true;
          break;
        case 'developer':
          this.req.user.employee = true;
      }
      return this.req.user.save(function(err) {
        if (!err) {
          if (!_this.req.xhr) {
            return _this.res.redirect("back");
          } else {
            return _this.res.json({
              success: true,
              user: _this.req.user.public_info()
            });
          }
        } else {
          if (!_this.req.xhr) {
            return _this.res.redirect("back");
          } else {
            return _this.res.json({
              success: false,
              err: "Error updating database"
            });
          }
        }
      });
    } else {
      if (!this.req.xhr) {
        return this.res.redirect("back");
      } else {
        return this.res.json({
          success: false,
          err: "Please, sign the agreement"
        });
      }
    }
  };

  ProfileController.prototype.merchant_agreement = function() {
    if (this.req.method === "GET") {
      if (this.req.user.merchant !== true) {
        return this._generateAgreementField(agreement_text, this.context.merchant_agreement);
      } else {
        return this.res.redirect(this.context.profile_url);
      }
    } else {
      return this._acceptToa("merchant");
    }
  };

  ProfileController.prototype.developer_agreement = function() {
    if (this.req.method === "GET") {
      if (this.req.user.employee !== true) {
        return this._generateAgreementField(agreement_text, this.context.developer_agreement);
      } else {
        return this.res.redirect(this.context.profile_url);
      }
    } else {
      return this._acceptToa("developer");
    }
  };

  ProfileController.prototype.update_credit_card = function() {
    var cvv, exp_month, exp_year, expiration, givenName, lastName, number, _ref, _ref1, _ref2,
      _this = this;
    if ((_ref = this.req.method) === "POST" || _ref === "GET") {
      _ref1 = this.req.body.card, givenName = _ref1.givenName, lastName = _ref1.lastName, number = _ref1.number, expiration = _ref1.expiration, cvv = _ref1.cvv;
      _ref2 = expiration.split("/"), exp_month = _ref2[0], exp_year = _ref2[1];
      return Stripe.addCustomer(this.req.user, "Stripe payment method for " + givenName + " " + lastName, number, exp_month, exp_year, cvv, "" + givenName + " " + lastName, function(err, result) {
        return _this.res.json({
          success: err != null ? false : true,
          err: err,
          result: result
        });
      });
    } else {
      return this.res.send("Not permitted", 401);
    }
  };

  return ProfileController;

})(require('./basicController'));

module.exports = function(req, res) {
  return new ProfileController(req, res);
};
