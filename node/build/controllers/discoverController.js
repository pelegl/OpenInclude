// Generated by CoffeeScript 1.6.1
var DiscoverController, esClient,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

esClient = require('../conf').esClient;

DiscoverController = (function(_super) {

  __extends(DiscoverController, _super);

  function DiscoverController(req, res) {
    var q;
    this.req = req;
    this.res = res;
    this.context = {
      discover_search_action: "/discover"
    };
    q = this.req.query.q;
    if (q) {
      this.context.discover_search_query = q;
    }
    DiscoverController.__super__.constructor.apply(this, arguments);
  }

  DiscoverController.prototype.index = function() {
    this.context.body = this._view('discover/index', this.context);
    return this.res.render('base', this.context);
  };

  DiscoverController.prototype.search = function() {
    var options, query, savedData,
      _this = this;
    query = {
      query: {
        multi_match: {
          query: this.context.discover_search_query || "",
          use_dis_max: true,
          fields: ["description", "module_name^2", "language^1.5"]
        }
      }
    };
    options = {
      size: 50
    };
    savedData = [];
    return esClient.search('mongomodules', 'module', query, options).on('data', function(data) {
      return savedData.push(data);
    }).on('done', function() {
      var data, maxScore, output;
      data = JSON.parse(savedData.join(""));
      if (data.hits) {
        maxScore = data.hits.max_score;
        output = data.hits.hits;
      } else {
        output = [];
      }
      if (_this.req.xhr) {
        return _this.res.json({
          searchData: output,
          maxScore: maxScore
        });
      } else {
        _this.context.searchData = JSON.stringify(output);
        _this.context.maxScore = maxScore;
        return _this.index();
      }
    }).on('error', function(error) {
      if (_this.req.xhr) {
        return _this.res.json(error, 500);
      } else {
        _this.context.searchError = true;
        return _this.index();
      }
    }).exec();
  };

  return DiscoverController;

})(require('./basicController'));

module.exports = function(req, res) {
  return new DiscoverController(req, res);
};
