// Generated by CoffeeScript 1.6.1
/*
  Dependencies
*/

var RedisStore, app, async, cluster, conf, connect, express, forkApp, hbs, numCPUs, root, secret, startApp, store;

express = require('express');

connect = require('connect');

RedisStore = require('connect-redis')(connect);

store = new RedisStore();

secret = "dsakldaSAKDLJkasl192a12";

cluster = require('cluster');

numCPUs = require('os').cpus().length;

hbs = require('consolidate').handlebars;

conf = require('./conf');

async = require('async');

/*
Configuration of the variables
*/


app = express();

root = __dirname;

startApp = function() {
  var _this = this;
  app.configure(function() {
    app.engine('hbs', hbs);
    app.set('env', process.env.NODE_ENV || 'dev');
    app.set('view engine', 'hbs');
    app.set('views', "" + root + "/views/layouts");
    app.use('/static', express["static"]("" + root + "/static"));
    app.use(function(req, res, next) {
      req.app = app;
      return next();
    });
    app.use(express.bodyParser({
      uploadDir: "" + root + "/tmp"
    }));
    app.use(express.cookieParser(secret));
    app.use(express.session({
      store: store,
      key: 'openinclude.sess'
    }));
    app.use(conf.passport_initialize());
    app.use(conf.passport_session());
    app.use(express.methodOverride());
    return app.use(app.router);
  });
  app.configure("production", function() {
    app.set('port', 4444);
    app.set('host', '127.0.0.1');
    app.use(express.errorHandler({
      dumpExceptions: false,
      showStack: false
    }));
    return app.use(function(err, req, res, next) {
      return res.send("Error", 500);
    });
  });
  app.configure("dev", function() {
    app.set('port', process.env.PORT || 8900);
    app.set('host', '0.0.0.0');
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });
  return async.auto({
    views: function(cb) {
      return conf.registerPartials("" + root + "/views/partials", cb);
    },
    controllers: conf.setControllers,
    router: [
      'views', function(cb, results) {
        app.Views = results.views;
        app.Controllers = results.controllers;
        require('./router').set(app);
        return cb(null);
      }
    ]
  }, function(err, results) {
    var host, port;
    if (!err) {
      port = app.get('port');
      host = app.get('host');
      return app.listen(port, host, function() {
        return console.log("[__app__] Listening " + host + ":" + port);
      });
    } else {
      return console.log(err);
    }
  });
};

forkApp = function() {
  var i;
  if (process.env.NODE_ENV === "production") {
    if (cluster.isMaster) {
      i = 0;
      while (i < numCPUs) {
        cluster.fork();
        i++;
      }
      return cluster.on("exit", function(worker, code, signal) {
        return console.error("[__cluster__] Worker " + worker.process.pid + " died.");
      });
    } else {
      return startApp();
    }
  } else {
    return startApp();
  }
};

if (cluster.isMaster) {
  forkApp();
}
