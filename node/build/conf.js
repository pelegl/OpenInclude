// Generated by CoffeeScript 1.6.1
var GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, GithubStrategy, Handlebars, SERVER_URL, STATIC_URL, async, controllers, db, developer_agreement, discover_url, esClient, esc, fs, github, github_auth_url, how_to_url, load, loaded_models, logout_url, merchant_agreement, modules_url, mongoose, passport, passport_init, profile_url, registerPartials, serverOptions, signin_url, update_credit_card, views, _;

Handlebars = require('handlebars');

async = require('async');

fs = require('fs');

esc = require('elasticsearchclient');

mongoose = require('mongoose');

_ = require('underscore');

passport = require('passport');

GithubStrategy = require('passport-github').Strategy;

exports.db = db = mongoose.createConnection('localhost', 'openInclude');

/*
  String capitalize
*/


String.prototype.capitalize = function() {
  return this.charAt(0).toUpperCase() + this.slice(1);
};

/*
  Elastic search module
*/


serverOptions = {
  host: 'localhost',
  port: 9200,
  secure: false
};

exports.esClient = esClient = new esc(serverOptions);

/*
  Github service
*/


github = require('octonode');

GITHUB_CLIENT_ID = '2361006ea086ad268742';

GITHUB_CLIENT_SECRET = '8983c759727c4195ae2b34916d9ed313eeafa332';

exports.git = github.client({
  id: GITHUB_CLIENT_ID,
  secret: GITHUB_CLIENT_SECRET
});

exports.git_second = github.client({
  id: "fbc1f03fd6ef162b3463",
  secret: "bead2882abb9409df91f4ba7fecc450c6e989d4b"
});

/*
  Some static helpers
*/


SERVER_URL = exports.SERVER_URL = "http://ec2-107-20-8-160.compute-1.amazonaws.com:" + (process.env.PORT || 8900);

STATIC_URL = exports.STATIC_URL = "/static/";

exports.logout_url = logout_url = "/auth/logout";

exports.profile_url = profile_url = "/profile";

exports.signin_url = signin_url = "" + profile_url + "/login";

exports.github_auth_url = github_auth_url = "/auth/github";

exports.discover_url = discover_url = "/discover";

exports.how_to_url = how_to_url = "/how-to";

exports.modules_url = modules_url = '/modules';

exports.merchant_agreement = merchant_agreement = "" + profile_url + "/merchant_agreement";

exports.developer_agreement = developer_agreement = "" + profile_url + "/developer_agreement";

exports.update_credit_card = update_credit_card = "" + profile_url + "/update_credit_card";

/*
  Export controllers to the app
*/


controllers = {};

exports.setControllers = function(cb) {
  var dir,
    _this = this;
  dir = __dirname + "/controllers";
  return fs.readdir(dir, function(err, files) {
    if (!err) {
      files.forEach(function(file) {
        if (!/^basic/.test(file)) {
          return controllers["" + (file.replace(/^(.*)Controller.[a-z]+$/i, '$1'))] = require("" + dir + "/" + file);
        }
      });
      return cb(null, controllers);
    } else {
      return cb(err);
    }
  });
};

/*
  Registering partials in the memory, avoid reading them from FS later on
*/


views = {};

exports.registerPartials = registerPartials = function(dir, callback, dirViews) {
  var format,
    _this = this;
  format = "hbs";
  if (!dirViews) {
    dirViews = "" + dir + "/";
  }
  return fs.readdir(dir, function(err, files) {
    if (!err) {
      return async.forEach(files, function(file, cb) {
        var dirs;
        file = "" + dir + "/" + file;
        dirs = [];
        return fs.stat(file, function(err, stat) {
          var content, ext, name;
          if (!err) {
            if (stat.isDirectory()) {
              dirs.push(file);
            } else if (stat.isFile()) {
              ext = file.replace(/^.*\.([a-z]+)$/i, "$1");
              if (ext === format) {
                name = file.replace(dirViews, "").replace("." + format, "");
                content = fs.readFileSync(file, 'utf8');
                Handlebars.registerPartial(name, content);
                Handlebars.registerPartial(name.replace(/\./g, "/"), content);
                views[name] = content;
              }
            }
            return async.forEach(dirs, function(d, acb) {
              return registerPartials(d, acb, dirViews);
            }, cb);
          } else {
            return cb(err);
          }
        });
      }, function(err) {
        return callback(err, views);
      });
    } else {
      return callback(err);
    }
  });
};

exports.passport_session = function() {
  return passport.session();
};

exports.passport_initialize = function() {
  passport_init();
  return passport.initialize();
};

passport_init = exports.passport_init = function() {
  var User;
  User = load(['User'])[0];
  passport.serializeUser(function(user, done) {
    return done(null, user.github_id);
  });
  passport.deserializeUser(function(id, done) {
    var _this = this;
    return User.findOne({
      github_id: id
    }, function(error, user) {
      if (error) {
        return done(error);
      }
      return done(null, user);
    });
  });
  return passport.use(new GithubStrategy({
    clientID: GITHUB_CLIENT_ID,
    clientSecret: GITHUB_CLIENT_SECRET,
    callbackURL: "" + SERVER_URL + "/auth/github/callback"
  }, function(access_token, refresh_token, profile, done) {
    console.log('verify', profile);
    return User.findOne({
      github_id: profile.id
    }, function(error, user) {
      if (error) {
        return done(error);
      }
      if (user) {
        return done(null, user);
      }
      user = new User({
        github_id: profile.id,
        github_display_name: profile.displayName,
        github_username: profile.username,
        github_avatar_url: profile._json.gravatar_id,
        github_email: profile._json.email,
        github_json: profile._json
      });
      return user.save(function(error, user) {
        if (error) {
          return done(error);
        }
        if (user) {
          return done(null, user);
        }
      });
    });
  }));
};

exports.github_auth = function(options) {
  return passport.authenticate('github', options);
};

exports.logout = function(req, res) {
  req.logout();
  return res.redirect("back");
};

exports.is_authenticated = function(request, response, next) {
  if (!request.isAuthenticated()) {
    return response.redirect(signin_url);
  }
  return next();
};

exports.is_not_authenticated = function(request, response, next) {
  if (request.isAuthenticated()) {
    return response.redirect(profile_url);
  }
  return next();
};

loaded_models = {};

load = function(required) {
  var models;
  models = [];
  required.forEach(function(name) {
    var getters, module, setters,
      _this = this;
    if (!loaded_models[name]) {
      module = require('./models/' + name);
      if (module.definition) {
        module.schema = new mongoose.Schema(module.definition, module.options || {});
        if (module.methods) {
          module.schema.methods = module.methods;
        }
        if (module.statics) {
          module.schema.statics = module.statics;
        }
        /*
          Set virtuals
        */

        if (module.virtuals != null) {
          getters = Object.keys(module.virtuals.get);
          setters = Object.keys(module.virtuals.set);
          if (getters.length > 0) {
            getters.forEach(function(getterName) {
              return module.schema.virtual(getterName).get(module.virtuals.get[getterName]);
            });
          }
          if (setters.length > 0) {
            setters.forEach(function(setterName) {
              return module.schema.virtual(setterName).set(module.virtuals.set[setterName]);
            });
          }
        }
        /*
          Set index
        */

        if (module.index != null) {
          _.each(module.index, function(index) {
            return module.schema.index.apply(module.schema, index);
          });
        }
        if (!module.modelName) {
          module.model = db.model(name, module.schema);
        } else {
          module.model = db.model(name, module.schema, module.modelName);
        }
        models.push(module.model);
      }
      return loaded_models[name] = module;
    } else {
      return models.push(loaded_models[name].model);
    }
  });
  return models;
};

exports.get_models = load;
